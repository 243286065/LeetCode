## 题目描述
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:
```
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
```
示例 2:
```
输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]
```

## 题解
比较清晰的是使用两次二分查找即可达到目的，难点主要是细节边界的处理。  
考虑到标准库中的`low_bound`和`upper_bound`的实现，注意是左闭右开的搜索区间。

```
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = low_bound(nums, target);
        int right = upper_bound(nums, target);

        if(left == right) return {-1, -1};
        else return {left, right-1};
    }

    //第一个大于或等于target的位置
    int low_bound(vector<int>& nums, int target) {
        int left = 0, right = nums.size();
        int mid = 0;
        while(left < right) {
            mid = left + right >> 1;
            if(nums[mid] >= target) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }

    //第一个大于target的位置
    int upper_bound(vector<int>& nums, int target) {
        int left = 0, right = nums.size();
        int mid = 0;
        while(left < right) {
            mid = left + right >> 1;
            if(nums[mid] > target) {
                right = mid;
            }else {
                left = mid + 1;
            }
        }
        return left;
    }
};
```

> * 两次二分遍历，唯一一点不同，在于调整right索引的判定条件，一个是`>=`，一个是`>`，其他完全一样。
> * 注意搜索区间需要是左闭右开区间才行。 